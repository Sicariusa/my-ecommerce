/**
 * Code Generator Utility
 * 
 * Generates Next.js code from builder component tree.
 * Creates pages, components, and configuration files.
 */

import { ComponentNode, Project, Page } from '../schema';

/**
 * Generate React component code from a ComponentNode
 */
export function generateComponentCode(node: ComponentNode, indent = 0): string {
    const spacing = '  '.repeat(indent);
    const props = node.props || {};
    const styles = node.styles || {};

    // Build style object
    const styleString = Object.keys(styles).length > 0
        ? ` style={${JSON.stringify(styles)}}`
        : '';

    // Build props string
    const propsArray: string[] = [];
    Object.entries(props).forEach(([key, value]) => {
        if (typeof value === 'string') {
            propsArray.push(`${key}="${value}"`);
        } else if (typeof value === 'boolean') {
            propsArray.push(value ? key : '');
        } else {
            propsArray.push(`${key}={${JSON.stringify(value)}}`);
        }
    });
    const propsString = propsArray.filter(Boolean).join(' ');

    // Handle different component types
    switch (node.type) {
        case 'Body':
            return `${spacing}<div className="min-h-screen"${styleString}>\n${node.children.map(child => generateComponentCode(child, indent + 1)).join('\n')
                }\n${spacing}</div>`;

        case 'Section':
            return `${spacing}<section id="${props.id || ''}" className="${props.className || ''}"${styleString}>\n${node.children.map(child => generateComponentCode(child, indent + 1)).join('\n')
                }\n${spacing}</section>`;

        case 'Container':
        case 'Div':
            return `${spacing}<div className="${props.className || ''}"${styleString}>\n${node.children.map(child => generateComponentCode(child, indent + 1)).join('\n')
                }\n${spacing}</div>`;

        case 'Text':
            return `${spacing}<p className="${props.className || ''}"${styleString}>${props.text || 'Text content'}</p>`;

        case 'Heading':
            const level = props.level || 'h1';
            return `${spacing}<${level} className="${props.className || ''}"${styleString}>${props.text || 'Heading'}</${level}>`;

        case 'Button':
            const buttonProps = [
                propsString,
                props.linkType && props.linkType !== 'none' ? `onClick={() => handleButtonClick('${props.linkType}', '${props.linkTarget}')}` : '',
            ].filter(Boolean).join(' ');
            return `${spacing}<button ${buttonProps} className="${props.className || ''}"${styleString}>${props.text || 'Button'}</button>`;

        case 'Image':
            return `${spacing}<img src="${props.src || '/placeholder.jpg'}" alt="${props.alt || ''}" className="${props.className || ''}"${styleString} />`;

        case 'Link':
            return `${spacing}<a href="${props.href || '#'}" className="${props.className || ''}"${styleString}>${props.text || 'Link'}</a>`;

        case 'Input':
            return `${spacing}<input type="${props.type || 'text'}" placeholder="${props.placeholder || ''}" className="${props.className || ''}"${styleString} />`;

        default:
            return `${spacing}<div className="${props.className || ''}"${styleString}>\n${node.children.map(child => generateComponentCode(child, indent + 1)).join('\n')
                }\n${spacing}</div>`;
    }
}

/**
 * Generate a complete Next.js page from a Page object
 */
export function generatePageCode(page: Page): string {
    const tree = page.tree || [];

    return `/**
 * ${page.name}
 * Generated by LCNC Builder
 */

import React from 'react';

export default function ${page.name.replace(/[^a-zA-Z0-9]/g, '')}Page() {
    // Button click handler for navigation
    const handleButtonClick = (linkType: string, linkTarget: string) => {
        if (linkType === 'external') {
            window.location.href = linkTarget;
        } else if (linkType === 'page') {
            // TODO: Use Next.js router
            console.log('Navigate to page:', linkTarget);
        } else if (linkType === 'anchor') {
            const element = document.querySelector(\`#\${linkTarget}\`);
            element?.scrollIntoView({ behavior: 'smooth' });
        }
    };

    return (
${tree.map(node => generateComponentCode(node, 2)).join('\n')}
    );
}
`;
}

/**
 * Generate package.json for the exported project
 */
export function generatePackageJson(projectName: string): string {
    return JSON.stringify({
        name: projectName.toLowerCase().replace(/\s+/g, '-'),
        version: '1.0.0',
        private: true,
        scripts: {
            dev: 'next dev',
            build: 'next build',
            start: 'next start',
            lint: 'next lint',
        },
        dependencies: {
            next: '^15.0.0',
            react: '^18.3.0',
            'react-dom': '^18.3.0',
        },
        devDependencies: {
            '@types/node': '^22.0.0',
            '@types/react': '^18.3.0',
            '@types/react-dom': '^18.3.0',
            autoprefixer: '^10.4.0',
            eslint: '^9.0.0',
            'eslint-config-next': '^15.0.0',
            postcss: '^8.4.0',
            tailwindcss: '^3.4.0',
            typescript: '^5.6.0',
        },
    }, null, 2);
}

/**
 * Generate Next.js config files
 */
export function generateNextConfig(): string {
    return `/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
    images: {
        domains: ['localhost'],
    },
};

module.exports = nextConfig;
`;
}

export function generateTailwindConfig(): string {
    return `/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
        './pages/**/*.{js,ts,jsx,tsx,mdx}',
        './components/**/*.{js,ts,jsx,tsx,mdx}',
        './app/**/*.{js,ts,jsx,tsx,mdx}',
    ],
    theme: {
        extend: {},
    },
    plugins: [],
};
`;
}

export function generatePostcssConfig(): string {
    return `module.exports = {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
};
`;
}

export function generateGlobalsCSS(): string {
    return `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    --foreground-rgb: 0, 0, 0;
    --background-rgb: 255, 255, 255;
}

body {
    color: rgb(var(--foreground-rgb));
    background: rgb(var(--background-rgb));
}
`;
}

/**
 * Generate README for the exported project
 */
export function generateReadme(projectName: string): string {
    return `# ${projectName}

This project was generated by the LCNC E-commerce Builder.

## Getting Started

First, install the dependencies:

\`\`\`bash
npm install
# or
yarn install
# or
pnpm install
\`\`\`

Then, run the development server:

\`\`\`bash
npm run dev
# or
yarn dev
# or
pnpm dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Project Structure

- \`/pages\` - Next.js pages
- \`/public\` - Static assets
- \`/config\` - Builder configuration (project.json)

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs)
- [Learn Next.js](https://nextjs.org/learn)

## Deployment

Deploy this application using Vercel, Netlify, or any platform that supports Next.js.

Built with ❤️ using LCNC Builder
`;
}

/**
 * Generate TypeScript config
 */
export function generateTsConfig(): string {
    return JSON.stringify({
        compilerOptions: {
            target: 'ES2017',
            lib: ['dom', 'dom.iterable', 'esnext'],
            allowJs: true,
            skipLibCheck: true,
            strict: true,
            noEmit: true,
            esModuleInterop: true,
            module: 'esnext',
            moduleResolution: 'bundler',
            resolveJsonModule: true,
            isolatedModules: true,
            jsx: 'preserve',
            incremental: true,
            paths: {
                '@/*': ['./*'],
            },
        },
        include: ['next-env.d.ts', '**/*.ts', '**/*.tsx'],
        exclude: ['node_modules'],
    }, null, 2);
}
