generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
/// CORE SAAS MODELS
/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model Tenant {
  id          String        @id @default(uuid())
  name        String
  domain      String?       @unique
  plan        String        @default("free")
  status      String        @default("active")
  createdAt   DateTime      @default(now())
  users       TenantUser[]
  roles       Role[]          // ðŸŸ¢ Added back-reference
  sites       Site[]
  products    Product[]
  categories  Category[]
  customers   Customer[]
  orders      Order[]
  analytics   AnalyticsEvent[]
  media       Media[]
  subscriptions Subscription[]
  apiKeys     ApiKey[]
  webhooks    Webhook[]
  auditLogs   AuditLog[]
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  passwordHash String?
  fullName    String?
  createdAt   DateTime      @default(now())
  memberships TenantUser[]
  auditLogs   AuditLog[]     // ðŸŸ¢ Added back-reference
}

model Role {
  id          String        @id @default(uuid())
  tenantId    String
  name        String
  permissions Json?

  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  members     TenantUser[]

  @@unique([tenantId, name])
}

model TenantUser {
  tenantId String
  userId   String
  roleId   String?

  tenant   Tenant  @relation(fields: [tenantId], references: [id])
  user     User    @relation(fields: [userId], references: [id])
  role     Role?   @relation(fields: [roleId], references: [id])

  @@id([tenantId, userId])
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
/// CMS MODELS
/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model Site {
  id                 String        @id @default(uuid())
  tenantId           String
  name               String
  subdomain          String?
  publishedVersionId String?
  createdAt          DateTime      @default(now())

  tenant             Tenant        @relation(fields: [tenantId], references: [id])
  versions           SiteVersion[]
  pages              Page[]

  @@unique([tenantId, subdomain])
}

model SiteVersion {
  id          String   @id @default(uuid())
  siteId      String
  versionNum  Int
  status      String   @default("draft")
  createdAt   DateTime @default(now())

  site        Site     @relation(fields: [siteId], references: [id])

  @@unique([siteId, versionNum])
}

model Page {
  id        String        @id @default(uuid())
  siteId    String
  title     String
  slug      String
  seoMeta   Json?
  createdAt DateTime      @default(now())

  site      Site          @relation(fields: [siteId], references: [id])
  blocks    PageBlock[]

  @@unique([siteId, slug])
}

model PageBlock {
  id         String   @id @default(uuid())
  pageId     String
  orderIndex Int
  type       String
  config     Json?
  productId  String?
  mediaId    String?

  page       Page     @relation(fields: [pageId], references: [id])
  product    Product? @relation(fields: [productId], references: [id])
  media      Media?   @relation(fields: [mediaId], references: [id])

  @@index([pageId])
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
/// MEDIA STORAGE
/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model Media {
  id        String   @id @default(uuid())
  tenantId  String
  url       String
  type      String   // image or video
  provider  String?  // local, youtube, vimeo
  meta      Json?
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  blocks    PageBlock[]  // ðŸŸ¢ Added back-reference
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
/// COMMERCE MODELS
/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model Category {
  id        String     @id @default(uuid())
  tenantId  String
  name      String
  parentId  String?

  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  products  Product[]
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")

  @@unique([tenantId, name])
}

model Product {
  id          String            @id @default(uuid())
  tenantId    String
  name        String
  description String?
  basePrice   Decimal
  sku         String
  categoryId  String?
  status      String            @default("active")
  createdAt   DateTime          @default(now())

  tenant      Tenant            @relation(fields: [tenantId], references: [id])
  category    Category?         @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  blocks      PageBlock[]
  orderItems  OrderItem[]       @relation("ProductToOrderItem") // âœ… fixed relation name

  @@unique([tenantId, sku])
}

model ProductVariant {
  id            String   @id @default(uuid())
  productId     String
  sku           String
  attributes    Json?
  priceOverride Decimal?
  stockQuantity Int      @default(0)

  product       Product  @relation(fields: [productId], references: [id])
  orderItems    OrderItem[] // ðŸŸ¢ Added back-reference
}

model Customer {
  id        String   @id @default(uuid())
  tenantId  String
  email     String
  name      String?
  phone     String?
  address   Json?
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  orders    Order[]

  @@unique([tenantId, email])
}

model Order {
  id           String      @id @default(uuid())
  tenantId     String
  customerId   String?
  total        Decimal
  status       String      @default("pending")
  paymentStatus String     @default("unpaid")
  createdAt    DateTime    @default(now())

  tenant       Tenant      @relation(fields: [tenantId], references: [id])
  customer     Customer?   @relation(fields: [customerId], references: [id])
  items        OrderItem[]
}

model OrderItem {
  id              String          @id @default(uuid())
  orderId         String
  productId       String?         // âœ… Added this field
  productVariantId String?
  quantity        Int
  unitPrice       Decimal
  total           Decimal

  order           Order           @relation(fields: [orderId], references: [id])
  product         Product?        @relation("ProductToOrderItem", fields: [productId], references: [id]) // âœ… fixed opposite link
  variant         ProductVariant? @relation(fields: [productVariantId], references: [id])
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
/// ANALYTICS
/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model AnalyticsEvent {
  id         String   @id @default(uuid())
  tenantId   String
  sessionId  String?
  eventType  String
  props      Json?
  createdAt  DateTime @default(now())

  tenant     Tenant   @relation(fields: [tenantId], references: [id])
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
/// BILLING
/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model Plan {
  id              String     @id @default(uuid())
  name            String     @unique
  pricePerMonth   Decimal
  features        Json?
  subscriptions   Subscription[]
}

model Subscription {
  id          String   @id @default(uuid())
  tenantId    String
  planId      String
  status      String   @default("active")
  currentPeriodEnd DateTime?
  createdAt   DateTime @default(now())

  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  plan        Plan     @relation(fields: [planId], references: [id])
}

/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
/// SYSTEM UTILITIES
/// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

model ApiKey {
  id          String   @id @default(uuid())
  tenantId    String
  key         String
  description String?
  createdAt   DateTime @default(now())

  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model Webhook {
  id        String   @id @default(uuid())
  tenantId  String
  event     String
  url       String
  secret    String?
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model AuditLog {
  id        BigInt   @id @default(autoincrement())
  tenantId  String
  userId    String?
  action    String
  entity    String
  entityId  String?
  timestamp DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}
